version: '3.8'

services:
  # Main Application
  verisphere:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://verisphere:verisphere123@postgres:5432/verisphere
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./config:/app/config
      - ./out:/app/out
    networks:
      - verisphere-network

  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: verisphere
      POSTGRES_USER: verisphere
      POSTGRES_PASSWORD: verisphere123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - verisphere-network

  # Cache and Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - verisphere-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: verisphere
      RABBITMQ_DEFAULT_PASS: verisphere123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - verisphere-network

  # Celery Worker
  celery-worker:
    build: .
    command: celery -A defame.core.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://verisphere:verisphere123@postgres:5432/verisphere
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=pyamqp://verisphere:verisphere123@rabbitmq:5672//
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./config:/app/config
      - ./out:/app/out
    networks:
      - verisphere-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - verisphere-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - verisphere-network

  # Optional: Firecrawl for web scraping
  firecrawl:
    image: ghcr.io/mendableai/firecrawl:latest
    ports:
      - "3002:3002"
    environment:
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - redis
    networks:
      - verisphere-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  verisphere-network:
    driver: bridge