apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: verisphere-ingress
  namespace: verisphere
  labels:
    app: verisphere
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;
    
    # Request size limit
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # AWS ALB annotations (alternative to NGINX)
    # kubernetes.io/ingress.class: "alb"
    # alb.ingress.kubernetes.io/scheme: "internet-facing"
    # alb.ingress.kubernetes.io/target-type: "ip"
    # alb.ingress.kubernetes.io/healthcheck-path: "/health"
    # alb.ingress.kubernetes.io/ssl-redirect: "443"
    
spec:
  tls:
  - hosts:
    - api.verisphere.com
    - verisphere.com
    - www.verisphere.com
    secretName: verisphere-tls-cert
  
  rules:
  # API endpoints
  - host: api.verisphere.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: verisphere-api-internal
            port:
              number: 8000
  
  # Web UI
  - host: verisphere.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: verisphere-api-internal
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: verisphere-web-service
            port:
              number: 80
  
  # WWW redirect
  - host: www.verisphere.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: verisphere-web-service
            port:
              number: 80

---
# Certificate for TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: verisphere-tls-cert
  namespace: verisphere
spec:
  secretName: verisphere-tls-cert
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - verisphere.com
  - www.verisphere.com
  - api.verisphere.com

---
# ClusterIssuer for Let's Encrypt (needs cert-manager installed)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@verisphere.com  # Change to your email
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx